# -*- coding: utf-8 -*-
"""XGBOOST FINAL MODEL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ksv2WoHT3p6Vrcv8sLjOmk4JutCwhI3e
"""

import pandas as pd
import numpy as np
from sklearn.cross_validation import train_test_split
import warnings
warnings.filterwarnings('ignore')
from xgboost import XGBClassifier

train = "https://raw.githubusercontent.com/12ani/Taarifa_water_table/master/pump_train_for_models%20(1).csv" 
test =  "https://raw.githubusercontent.com/12ani/Taarifa_water_table/master/water_table_test.csv"
train = pd.read_csv(train)
test = pd.read_csv(test)

test

dummy_cols = ['funder', 'installer', 'basin', 'public_meeting', 'scheme_management', 'permit',
              'construction_year', 'management_group', 'payment', 'water_quality',
              'quantity', 'source_class', 'waterpoint_type']

train = pd.get_dummies(train, columns = dummy_cols)

train = train.sample(frac=1).reset_index(drop=True)

test = pd.get_dummies(test, columns = dummy_cols)
#test

target = train.status_group
features = train.drop('status_group', axis=1)

X_train, X_val, y_train, y_val = train_test_split(features, target, train_size=0.8)

target

xgb = XGBClassifier(n_estimators=250,max_depth=10)
xgb

xgb_model = xgb.fit(X_train,y_train)

val_acc = xgb_model.score(X_val,y_val)
val_acc

scores = xgb_model.score(X_train,y_train)
scores

pred = xgb_model.predict(X_train)
pred

ytrain=y_train.values
ytrain

from sklearn import metrics

metrics.confusion_matrix(ytrain,pred)

from sklearn.metrics import classification_report

from sklearn.metrics import classification_report
#target_names = ['functional', 'functional needs repair', 'non functional']
print(classification_report(ytrain, pred))

from sklearn.externals import joblib
filename = 'xgb_modelmodel.sav'
joblib.dump(xgb_model,filename)

loaded_model_xgb = joblib.load(filename)

loaded_model_xgb

final_xgb=loaded_model_xgb.fit(features, target)     
predictions = loaded_model_xgb.predict(test)

final_filename = 'final_xgb1.sav'
joblib.dump(final_xgb,final_filename)

final_loaded = joblib.load(final_filename)
final_loaded

predictions

importances = final_loaded.feature_importances_
importances

indices = np.argsort(importances)[::-1]

# Print the feature ranking
print("Feature ranking:")

for f in range(X_val.shape[1]):
    print("%d. feature %d (%f)" % (f + 1, indices[f], importances[indices[f]]))
    print(X_val.columns[indices[f]],end=',')
    print()

predictions=pd.DataFrame(predictions)
predictions

#https://raw.githubusercontent.com/12ani/Taarifa_water_table/master/test_set_values.csv
pred_id = pd.read_csv('https://raw.githubusercontent.com/12ani/Taarifa_water_table/master/test_set_values.csv', usecols=['id'])
pred_id

final=pd.concat([pred_id,predictions],axis=1)
final

final.columns=['id','status_group']
final

final.to_csv('predictions_XGB.csv', index=False)

